//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AbacusAPI.DataContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class AbacusEntities : DbContext
    {
        public AbacusEntities()
            : base("name=AbacusEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AbacusCode> AbacusCodes { get; set; }
        public DbSet<Address> Addresses { get; set; }
        public DbSet<Building> Buildings { get; set; }
        public DbSet<City> Cities { get; set; }
        public DbSet<Comment> Comments { get; set; }
        public DbSet<ContactRole> ContactRoles { get; set; }
        public DbSet<Contact> Contacts { get; set; }
        public DbSet<ContactTitle> ContactTitles { get; set; }
        public DbSet<Conversation> Conversations { get; set; }
        public DbSet<Country> Countries { get; set; }
        public DbSet<Decile> Deciles { get; set; }
        public DbSet<InvoiceTotal> InvoiceTotals { get; set; }
        public DbSet<JobDescription> JobDescriptions { get; set; }
        public DbSet<MarketingJob> MarketingJobs { get; set; }
        public DbSet<OrganisationContact> OrganisationContacts { get; set; }
        public DbSet<OrganisationDetail_InSchool> OrganisationDetail_InSchool { get; set; }
        public DbSet<Organisation> Organisations { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<Program> Programs { get; set; }
        public DbSet<Rank> Ranks { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<State> States { get; set; }
        public DbSet<Suburb> Suburbs { get; set; }
        public DbSet<TypeOfRequest> TypeOfRequests { get; set; }
        public DbSet<utContactLog> utContactLogs { get; set; }
        public DbSet<utContentSearch> utContentSearches { get; set; }
        public DbSet<utCustomer> utCustomers { get; set; }
        public DbSet<utOrder> utOrders { get; set; }
        public DbSet<utOrderItem> utOrderItems { get; set; }
        public DbSet<utOrderStatusChangeLog> utOrderStatusChangeLogs { get; set; }
        public DbSet<utPromoCode> utPromoCodes { get; set; }
        public DbSet<utSchool> utSchools { get; set; }
        public DbSet<utSchoolGalleryImage> utSchoolGalleryImages { get; set; }
        public DbSet<utSchoolName> utSchoolNames { get; set; }
        public DbSet<utSchoolUser> utSchoolUsers { get; set; }
        public DbSet<utSendToFriendLog> utSendToFriendLogs { get; set; }
        public DbSet<utShoppingCart> utShoppingCarts { get; set; }
        public DbSet<utShoppingCartItem> utShoppingCartItems { get; set; }
        public DbSet<utShoppingCartItemBackup> utShoppingCartItemBackups { get; set; }
        public DbSet<utSPImage> utSPImages { get; set; }
        public DbSet<utSPOrder> utSPOrders { get; set; }
        public DbSet<utSPReorderItem> utSPReorderItems { get; set; }
    
        public virtual ObjectResult<getOrderItemsForProcessing_Result> getOrderItemsForProcessing()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getOrderItemsForProcessing_Result>("getOrderItemsForProcessing");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<usp_schoolNameSearch_Result> usp_schoolNameSearch(string schoolName)
        {
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("schoolName", schoolName) :
                new ObjectParameter("schoolName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_schoolNameSearch_Result>("usp_schoolNameSearch", schoolNameParameter);
        }
    
        public virtual ObjectResult<usp_utContentSearch_Result> usp_utContentSearch(string documentTypeAlias, string keyword)
        {
            var documentTypeAliasParameter = documentTypeAlias != null ?
                new ObjectParameter("documentTypeAlias", documentTypeAlias) :
                new ObjectParameter("documentTypeAlias", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_utContentSearch_Result>("usp_utContentSearch", documentTypeAliasParameter, keywordParameter);
        }
    }
}
